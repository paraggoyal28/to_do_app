[{"C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\index.js":"1","C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\App.js":"2","C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\components\\Item\\index.jsx":"3"},{"size":199,"mtime":1610185614112,"results":"4","hashOfConfig":"5"},{"size":8164,"mtime":1610186124083,"results":"6","hashOfConfig":"5"},{"size":3444,"mtime":1610185032452,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lhlkdt",{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\index.js",[],"C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\App.js",["16","17","18","19","20","21"],"import React, { Fragment } from 'react';\nimport './App.css';\nimport Item from './components/Item';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      idCount: 1, // count of the items\n      textValue: '', // value of the input item.\n      itemList: [], // original list of items\n      filteredList: [], // search filtered list of items\n      searchValue: '', // value of the search text field\n      markedItemCount: 0, // items which are marked \n      unmarkedItemCount: 0, // items which are not marked.\n      deletedItemCount: 0 // items which are deleted.\n    }\n  }\n\n\n  handleKeyPress = (e) => {\n    if (e.key === 'Enter') { // on pressing enter key we are submitting the response\n      // declaring an item\n      const item = {\n        id: this.state.idCount,\n        marked: false, // initially every item is unmarked,\n        createdAt: new Date().toLocaleString(),\n        lastUpdatedAt: new Date().toLocaleString(),\n        deleted: false,\n        text: e.target.value,\n        description: \"\",\n      }\n      this.setState({\n        itemList: [...this.state.itemList, item], idCount: this.state.idCount + 1,\n        textValue: '', unmarkedItemCount: this.state.unmarkedItemCount + 1\n      });\n    }\n  }\n\n  handleTextChange = (e) => {\n    // changing the text value of the item input box to be the value entered.\n    this.setState({ textValue: e.target.value });\n  }\n\n\n  handleMarkingAll = (e) => {\n    // if the mark all checkbox is checked then unmark all the checkboxes, and \n    // if the mark all checkbox is unchecked then mark all the checkboxes.\n    const checkState = this.state.markedItemCount === this.state.itemList.length;\n    const itemList = this.state.itemList.map(item => {\n      item.marked = checkState === true ? false : true;\n      return item;\n    });\n    // count the delete items so that they are not counted in marked and unmarked.\n    const deletedItemCount = itemList.filter(item => item.deleted).length;\n    const markedItemCount = itemList.filter(item => item.marked && !item.deleted).length;\n    console.log(markedItemCount);\n    const unmarkedItemCount = itemList.length - markedItemCount - deletedItemCount;\n    this.setState({ itemList, markedItemCount, unmarkedItemCount, deletedItemCount });\n  }\n\n  handleDelete = (e) => {\n    // handle Delete of a single item\n    const id = e.target.dataset.num;\n    const itemList = this.state.itemList.map(item => {\n      if (parseInt(item.id) === parseInt(id)) {\n        item.deleted = true;\n      }\n      return item;\n    });\n\n    this.setState({\n      itemList,\n      markedItemCount: this.state.markedItemCount - 1\n    });\n\n  }\n\n  handleDeleteMarked = (e) => {\n    // handle delete of all items that are marked.\n    let markedDeleteCount = 0;\n    const itemList = this.state.itemList.map(item => {\n      if (item.marked) {\n        markedDeleteCount++;\n        item.deleted = true;\n      }\n      return item;\n    });\n    this.setState({\n      itemList,\n      markedItemCount: this.state.markedItemCount - markedDeleteCount, deletedItemCount: this.state.deletedItemCount + 1\n    });\n  }\n\n  handleDescriptionChange = (e) => {\n    // change the description of the item.\n    const id = parseInt(e.target.dataset.num);\n    const itemList = this.state.itemList.map(item => {\n      if (parseInt(item.id) === id) {\n        item.description = e.target.value;\n      }\n      return item;\n    });\n    this.setState({ itemList });\n  }\n\n  handleSearch = (e) => {\n    // searching for a specific or list of items.\n    const value = e.target.value;\n    let filteredList = this.state.itemList;\n    if (value.length >= 3) {\n      filteredList = this.state.itemList.filter(item => (item.text &&\n        item.text.toLowerCase().includes(value.toLowerCase())) ||\n        (item.description && item.description.toLowerCase().includes(value.toLowerCase())));\n    }\n    this.setState({ filteredList, searchValue: value });\n  }\n\n  handleKeyPressDescription = (e) => {\n    // on pressing enter when the description is finished.\n    if (e.key === 'Enter') {\n      const descriptionBox = document.getElementById('descriptionInput' + e.target.dataset.num);\n      const descriptionText = document.getElementById('description' + e.target.dataset.num);\n      const id = parseInt(e.target.dataset.num);\n      const itemList = this.state.itemList.map(item => {\n        const words = item.description && item.description.slice(0, 140).split(' ') || [];\n        const description = words && words.length && words.map(word => word.slice(0, 30)).join(' ') || '';\n        if (parseInt(item.id) === id) {\n          item.description = description;\n          item.lastUpdatedAt = new Date().toLocaleString();\n        }\n        return item;\n      });\n      descriptionBox.style.display = 'none';\n      descriptionText.style.display = 'inline-block';\n      this.setState({ itemList });\n    }\n  }\n\n  handleChangeSingle = (e) => {\n    // handle checking and unchecking of a single item.\n    const id = parseInt(e.target.dataset.num);\n    const itemList = this.state.itemList.map(item => {\n      if (parseInt(item.id) === id) {\n        item.marked = !item.marked;\n      }\n      return item;\n    });\n    const deletedItemCount = itemList.filter(item => item.deleted).length;\n    const markedItemCount = itemList.filter(item => item.marked && !item.deleted).length;\n    const unmarkedItemCount = itemList.length - markedItemCount - deletedItemCount;\n    this.setState({ itemList, markedItemCount, unmarkedItemCount, deletedItemCount });\n  }\n\n\n  render() {\n    const { textValue, searchValue, filteredList, unmarkedItemCount, markedItemCount, itemList } = this.state;\n    return (\n      <Fragment>\n        <div className=\"todoapp\">\n          <h1 className=\"heading\">TODOS</h1>\n          <input id=\"new-todo\" type=\"text\" value={textValue} onKeyPress={this.handleKeyPress} onChange={this.handleTextChange} placeholder=\"What needs to be done?\" />\n          {(unmarkedItemCount !== 0 || markedItemCount !== 0) &&\n            (\n              <Fragment>\n                <input id=\"toggle-all\" type=\"checkbox\"\n                  checked={markedItemCount === itemList.length}\n                  onChange={this.handleMarkingAll} />\n                <label htmlFor=\"toggle-all\" >Mark all as complete</label>\n                <input id=\"search-todo\" type=\"text\" value={searchValue} onChange={this.handleSearch} placeholder=\"What you want to search?\" />\n\n                {searchValue && searchValue.length >= 3 && filteredList.length >= 1 && filteredList.map(item =>\n                  !item.deleted && (<Item key={item.id} item={item} handleDelete={this.handleDelete}\n                    handleChangeSingle={this.handleChangeSingle}\n                    handleKeyPress={this.handleKeyPressDescription}\n                    handleDescriptionChange={this.handleDescriptionChange} />)\n                )}\n\n\n                {(!searchValue || searchValue.length < 3) && itemList.length >= 1 && itemList.map(item =>\n                  !item.deleted && (<Item key={item.id} item={item} handleDelete={this.handleDelete}\n                    handleChangeSingle={this.handleChangeSingle}\n                    handleKeyPress={this.handleKeyPressDescription}\n                    handleDescriptionChange={this.handleDescriptionChange} />)\n                )}\n\n                <div className=\"footer\">\n                  <span><b>{unmarkedItemCount}</b> items left </span>\n                  {markedItemCount > 0 && <a id=\"clear-completed\" onClick={this.handleDeleteMarked}>Clear {markedItemCount} completed items</a>}\n                </div>\n\n              </Fragment>)}\n        </div>\n\n        {this.state.deletedItemCount > 0 && (<div className=\"history\">\n          <h1>Completed Items:</h1>\n          {itemList.map(item => {\n            if (item.deleted) {\n              return (\n                <div className=\"history-item\">\n                  <h2>{item.text}</h2>\n                  <p>{item.description}</p>\n                  <span>{item.createdAt}</span><span>{item.lastUpdatedAt}</span>\n                </div>\n              );\n            }\n          })}\n        </div>)}\n      </Fragment>\n    )\n\n  }\n}\n\nexport default App;","C:\\Users\\Parag\\Documents\\ToDoApp\\to_do_app\\src\\components\\Item\\index.jsx",["22","23","24","25","26","27"],"import React from 'react';\r\nimport './index.css';\r\n\r\nclass Item extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    handleMouseEnter = (e) => {\r\n        // displaying the add description icon and delete icon when the mouse enters the item area.\r\n        const deleteIcon = document.getElementById('delete' + e.target.dataset.num);\r\n        const addIcon = document.getElementById('add' + e.target.dataset.num);\r\n        if (deleteIcon && deleteIcon.style) {\r\n            deleteIcon.style.display = 'inline-block';\r\n        }\r\n        if (addIcon && addIcon.style) {\r\n            addIcon.style.display = 'inline-block';\r\n        }\r\n    }\r\n\r\n    handleMouseLeave = (e) => {\r\n        // hiding the add description icon and delete icon when the mouse leaves the item area.\r\n        const deleteIcon = document.getElementById('delete' + e.target.dataset.num);\r\n        const addIcon = document.getElementById('add' + e.target.dataset.num);\r\n        if (deleteIcon && deleteIcon.style) {\r\n            deleteIcon.style.display = 'none';\r\n        }\r\n        if (addIcon && addIcon.style) {\r\n            addIcon.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    handleAddDescription = (e) => {\r\n        // on click of the add description icon show the description text box to enter the description.\r\n        const descriptionBox = document.getElementById('descriptionInput' + e.target.dataset.num);\r\n        const descriptionText = document.getElementById('description' + e.target.dataset.num);\r\n        descriptionBox.style.display = 'inline-block';\r\n        descriptionText.style.display = 'none';\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { id, marked, createdAt, lastUpdatedAt, deleted, text, description } = this.props.item;\r\n        return (\r\n            // adding a data-num field to every div and child element to keep track of the particular item \r\n            // when mouse leaves from any point in the area.\r\n            <div data-num={id}>\r\n                <div data-num={id} id={'view' + id} className=\"view\" onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\r\n                    <div data-num={id}>\r\n                        <input data-num={id} className=\"toggle\" type=\"checkbox\" checked={marked} id={\"check\" + id} onChange={this.props.handleChangeSingle} />\r\n                        <label data-num={id} className=\"viewText\">{text}</label>\r\n                        <a data-num={id} id={'add' + id} className=\"add\" onClick={this.handleAddDescription}></a>\r\n                        {marked && <a data-num={id} id={'delete' + id} className=\"delete\" onClick={this.props.handleDelete}></a>}\r\n                    </div>\r\n                    <div data-num={id} className=\"description\" id={'description' + id}>\r\n                        {description}\r\n                    </div>\r\n\r\n                    <div data-num={id} className=\"date\">\r\n                        <span data-num={id} className=\"created\">Created At: {createdAt} </span>\r\n                        <span data-num={id} className=\"updated\">Last Updated At: {lastUpdatedAt}</span>\r\n                    </div>\r\n                </div>\r\n                <input data-num={id} className=\"descriptionInput\" value={description} id={'descriptionInput' + id} onKeyPress={this.props.handleKeyPress}\r\n                    onChange={this.props.handleDescriptionChange} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item;",{"ruleId":"28","severity":1,"message":"29","line":126,"column":40,"nodeType":"30","messageId":"31","endLine":126,"endColumn":42},{"ruleId":"28","severity":1,"message":"29","line":126,"column":85,"nodeType":"30","messageId":"31","endLine":126,"endColumn":87},{"ruleId":"28","severity":1,"message":"29","line":127,"column":51,"nodeType":"30","messageId":"31","endLine":127,"endColumn":53},{"ruleId":"28","severity":1,"message":"29","line":127,"column":101,"nodeType":"30","messageId":"31","endLine":127,"endColumn":103},{"ruleId":"32","severity":1,"message":"33","line":189,"column":43,"nodeType":"34","endLine":189,"endColumn":101},{"ruleId":"35","severity":1,"message":"36","line":197,"column":30,"nodeType":"37","messageId":"38","endLine":197,"endColumn":32},{"ruleId":"39","severity":1,"message":"40","line":5,"column":5,"nodeType":"41","messageId":"42","endLine":7,"endColumn":6},{"ruleId":"43","severity":1,"message":"44","line":45,"column":55,"nodeType":"45","messageId":"46","endLine":45,"endColumn":62},{"ruleId":"47","severity":1,"message":"48","line":54,"column":25,"nodeType":"34","endLine":54,"endColumn":110},{"ruleId":"32","severity":1,"message":"33","line":54,"column":25,"nodeType":"34","endLine":54,"endColumn":110},{"ruleId":"47","severity":1,"message":"48","line":55,"column":36,"nodeType":"34","endLine":55,"endColumn":125},{"ruleId":"32","severity":1,"message":"33","line":55,"column":36,"nodeType":"34","endLine":55,"endColumn":125},"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'deleted' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader."]